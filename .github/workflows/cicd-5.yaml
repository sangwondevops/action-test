name: module cicd
permissions:
  id-token: write
  contents: write
  pull-requests: write
on:
  push:
    paths:
      - 'my-app/**'
      - 'kubernetes/example-a/**'
      - '*.txt'
      - '.github/workflows/*'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'
  pull_request:
    types: [opened, reopened, synchronize, closed]
    branches: [develop, production]
    paths:
      - 'my-app/**'
      - 'kubernetes/example-a/**'
      - '*.txt'
      - '.github/workflows/*'

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      set-env: ${{ steps.var.outputs.set-env }}
      set-tag: ${{ steps.var.outputs.set-tag }}
    steps:
      - name: fetch actions repo
        uses: actions/checkout@v3
        with:
          repository: "sangwondevops/action-module"
          path: ./action-module
      - name: check file list
        run: |
          ls action-module
      - uses: ./action-module/common/set-env
        id: var
        with:
          REF_TYPE: ${{ github.ref_type }}
          REF_NAME: ${{ github.ref_name }}

  test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout the code
        uses: actions/checkout@v3
      # - name: fetch actions repo
      #   uses: actions/checkout@v3
      #   with:
      #     repository: "sangwondevops/action-module"
      #     path: ./action-module
      # - name: Cache Node.js modules
      #   uses: ./action-module/common/cache
      #   with:
      #     NODE_VERSION: '18'
      #     WORKING_DIRECTORY: 'my-app'

  build-image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.set-env }}"]
    environment: ${{ matrix.environment }}
    needs: [ set-environment, test ]
    if: |
      github.event.pull_request.merged == true ||
      github.ref_type == 'tag'
    steps:
      - name: checkout the code
        uses: actions/checkout@v3
      # - name: fetch actions repo
      #   uses: actions/checkout@v3
      #   with:
      #     repository: "sangwondevops/action-module"
      #     path: ./action-module
      # - name: aws credentials
      #   uses: ./action-module/common/aws/credentials
      #   with:
      #     AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      # - name: Access ECR
      #   uses: ./action-module/common/docker/image
      #   with:
      #     ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }} 
      #     ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }} 
          
                 
  deploy:
    runs-on: ubuntu-latest
    needs: [ set-environment, build-image ]
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.set-env }}"]
    environment: ${{ matrix.environment }}
    steps:
    - name: checkout the code
      uses: actions/checkout@v3
    # - name: fetch actions repo
    #   uses: actions/checkout@v3
    #   with:
    #     repository: "sangwondevops/action-module"
    #     path: ./action-module
    # - name: aws credentials
    #   uses: ./action-module/common/aws/credentials
    #   with:
    #     AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
    # - name: deploy kubernetes
    #   uses: ./action-module/common/deploy/kubernetes
    #   with:
    #     EKS_CLUSTER: ${{ secrets.EKS_CLUSTER }} 
    #     RELEASE_NAME: example-a
    #     HELM_CHART_PATH: kubernetes/example-a
    #     NAMESPACE: example-a-${{ matrix.environment }}
    #     VALUES_PATH: ${{ vars.VALUES_PATH }}
  
  create-pr:
    runs-on: ubuntu-latest
    needs: [ set-environment, deploy ]
    if: |
      needs.set-environment.outputs.set-env == 'qa'
    steps:
    - name: checkout the code
      uses: actions/checkout@v3
    - name: fetch actions repo
      uses: actions/checkout@v3
      with:
        repository: "sangwondevops/action-module"
        path: ./action-module
    - name: create-pr
      uses: ./action-module/common/create-pr
      with:
        PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }} 
        TAG: ${{ needs.set-environment.outputs.set-tag }}
        BASE: production

  slack:
    runs-on: ubuntu-latest
    needs: [set-environment, deploy]
    if: |
      always() && ( needs.deploy.result == 'success' || needs.deploy.result == 'failure' ) 
    steps:
    - name: fetch actions repo
      uses: actions/checkout@v3
      with:
        repository: "sangwondevops/action-module"
        path: ./action-module
    - name: notify (staging)
      if: |
        needs.set-environment.outputs.set-env == 'staging'
      uses: ./action-module/common/slack/approve
      with:
        DEPLOY_JOB_STATUS: ${{ needs.deploy.result }}
        ENVIRONMENT: ${{ needs.set-environment.outputs.set-env }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    - name: notify (dev,qa)
      if: |
        needs.set-environment.outputs.set-env != 'staging'
      uses: ./action-module/common/slack
      with:
        DEPLOY_JOB_STATUS: ${{ needs.deploy.result }}
        ENVIRONMENT: ${{ needs.set-environment.outputs.set-env }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    

  approve:
    runs-on: ubuntu-latest
    environment: approve
    needs: [ set-environment, deploy ]
    if: |
      needs.set-environment.outputs.set-env == 'staging'
    steps:
      - name: approve
        run: |
          echo "Approve Done. Start Prod deploy"

  prod-deploy:
    runs-on: ubuntu-latest
    needs: [ approve ]
    strategy:
      matrix:
        environment: ["production"]
    environment: ${{ matrix.environment }}
    steps:
    - name: checkout the code
      uses: actions/checkout@v3
    # - name: fetch actions repo
    #   uses: actions/checkout@v3
    #   with:
    #     repository: "sangwondevops/action-module"
    #     path: ./action-module
    # - name: aws credentials
    #   uses: ./action-module/common/aws/credentials
    #   with:
    #     AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
    # - name: deploy kubernetes
    #   uses: ./action-module/common/deploy/kubernetes
    #   with:
    #     EKS_CLUSTER: ${{ secrets.EKS_CLUSTER }} 
    #     RELEASE_NAME: example-a
    #     HELM_CHART_PATH: kubernetes/example-a 
    #     NAMESPACE: example-a-production
    #     VALUES_PATH: ${{ vars.VALUES_PATH }}
    # - name: notify(success)
    #   if: success()
    #   uses: ./action-module/common/slack
    #   with:
    #     DEPLOY_JOB_STATUS: success
    #     ENVIRONMENT: production
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    # - name: notify(failure)
    #   if: failure()
    #   uses: ./action-module/common/slack
    #   with:
    #     DEPLOY_JOB_STATUS: failure
    #     ENVIRONMENT: production
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  
  create-release:
    runs-on: ubuntu-latest
    needs: [prod-deploy]
    steps: 
      - name: checkout the code
        uses: actions/checkout@v3
      - name: fetch actions repo
        uses: actions/checkout@v3
        with:
          repository: "sangwondevops/action-module"
          path: ./action-module
      - name: create-release
        uses: ./action-module/common/create-release
        with:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }} 