name: cicd-2 # Deploy develop, production
permissions:
  pull-requests: write
  contents: write
on:
  push:
    branches: [develop, production]
  pull_request:
    types: [opened, reopened, synchronize]
    branches: [develop, production]

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      set-env: ${{ steps.var.outputs.set-env }}
    steps:
      - name: set env
        id: var
        run: |
          if [[ ${{ github.ref_name }} == "develop" ]]; then
            echo "set-env=develop" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "set-env=production" >> "$GITHUB_OUTPUT"
      - name: check env
        run: echo ${{ steps.var.outputs.set-env }}

  test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout the code
        uses: actions/checkout@v3
      # - name: setup-node
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18
      # - name: Cache Node.js modules
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-
      # - name: Install dependencies
      #   run: |
      #     cd my-app
      #     npm ci
      # - name: Test
      #   run: |
      #     cd my-app
      #     npm test

  build-image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.set-env }}"]
    environment: ${{ matrix.environment }}
    needs: [ set-environment, test ]
    if: |
      (github.event_name == 'push')
    steps:
      - name: checkout the code
        uses: actions/checkout@v3
      # - name: Configure AWS Credentials
      #   id: credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-region: ${{ vars.AWS_REGION }}
      #     role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1
      # - name: docker test
      #   run: |
      #     docker build -f ${GITHUB_WORKSPACE}/Dockerfile . \
      #     --tag ${{ env.registry }}/${{ env.repository }}:latest \
      #     --tag ${{ env.registry }}/${{ env.repository }}:${{ github.sha }}
      #     docker push ${{ env.registry }}/${{ env.repository }}:latest
      #     docker push ${{ env.registry }}/${{ env.repository }}:${{ github.sha }}
      #   env:
      #     repository: ${{ secrets.ECR_REPOSITORY }}
      #     registry: ${{ secrets.ECR_REGISTRY }}

  deploy:
    runs-on: ubuntu-latest
    needs: [ set-environment, build-image ]
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.set-env }}"]
    environment: ${{ matrix.environment }}
    steps:
    - uses: actions/checkout@v3
    # - name: Configure AWS Credentials
    #   id: credentials
    #   uses: aws-actions/configure-aws-credentials@v2
    #   with:
    #     aws-region: ${{ vars.AWS_REGION }}
    #     role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
    # - name: setup kubectl
    #   uses: azure/setup-kubectl@v3
    #   with:
    #     version: v1.23.0
    # - name: setup helm
    #   uses: azure/setup-helm@v3
    #   with:
    #     version: v3.7.2 
    # - name: get k8s kube-config
    #   run: |
    #     aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER }}
    # - name: deploy kubernetes manifest
    #   run: |
    #     helm upgrade --install test helm-chart/chart --namespace test-${{ matrix.environment }} --wait --atomic \
    #     --timeout 15m \
    #     --values helm-chart/values/${{ matrix.environment }}/values.yaml \
    #     --set image.tag=${{ github.sha }}
  
  create-pr:
    runs-on: ubuntu-latest
    needs: [ set-environment, deploy ]
    if: |
      needs.set-environment.outputs.set-env == 'develop'
    steps:
    - name: checkout the code
      uses: actions/checkout@v3
    - name: gh auth login
      run: |
        echo ${{ secrets.PERSONAL_ACCESS_TOKEN }} | gh auth login --with-token
    - name: create branch
      run: |
        git checkout -b create-pr-${{ github.run_id }}
        git push origin create-pr-${{ github.run_id }}
    - name: Create Pull Request
      run: |
        gh pr create --base production --title "Create PR Develop -> Production" --body "Create PR Develop -> Production" --head create-pr-${{ github.run_id }}
   
  slack:
    runs-on: ubuntu-latest
    needs: [set-environment, deploy]
    if: |
      always() && (needs.deploy.result == 'success' || needs.deploy.result == 'failure')
    steps:
    - name: notify
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "text": "Deploy Result: ${{ needs.deploy.result }} in repository: ${{ github.repository }}.",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Deploy Result: ${{ needs.deploy.result }} in repository: ${{ github.repository }}."
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK