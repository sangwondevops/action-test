name: argocd-1
permissions:
  pull-requests: write
  contents: write
on:
  push:
    branches: [develop, production]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+'
  pull_request:
    types: [opened, reopened, synchronize]
    branches: [develop, production]

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      set-env: ${{ steps.var.outputs.set-env }}
      set-tag: ${{ steps.var.outputs.set-tag }}
    steps:
      - name: fetch actions repo
        uses: actions/checkout@v3
        with:
          repository: "sangwondevops/action-module"
          path: ./action-module
          ref: ${{ vars.ref }}
      - name: check file list
        run: |
          ls action-module
      - uses: ./action-module/common/set-env
        id: var
        with:
          REF_TYPE: ${{ github.ref_type }}
          REF_NAME: ${{ github.ref_name }}

  test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout the code
        uses: actions/checkout@v3
      - name: fetch actions repo
        uses: actions/checkout@v3
        with:
          repository: "sangwondevops/action-module"
          path: ./action-module
          ref: ${{ vars.ref }}
      - uses: ./action-module/common/cache
        with:
          NODE_VERSION: '18'
          WORKING_DIRECTORY: 'my-app'

  build-image:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.set-env }}"]
    environment: ${{ matrix.environment }}
    needs: [ set-environment, test ]
    if: |
      (github.event_name == 'push')
    steps:
      - name: checkout the code
        uses: actions/checkout@v3
      - name: fetch actions repo
        uses: actions/checkout@v3
        with:
          repository: "sangwondevops/action-module"
          path: ./action-module
          ref: ${{ vars.ref }}
      # - name: aws credentials
      #   uses: ./action-module/aws/credentials
      #   with:
      #     AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
      # - name: Access ECR
      #   uses: ./action-module/docker/image
      #   with:
      #     REGISTRY: ${{ secrets.REGISTRY }} 
      #     REPOSITORY: ${{ secrets.REPOSITORY }} 
                 
  patch-image:
    runs-on: ubuntu-latest
    outputs:
      APPROVE_PR_URL: ${{ steps.var.outputs.APPROVE_PR_URL }}
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.set-env }}"]
    environment: ${{ matrix.environment }}
    needs: [ set-environment, build-image ]
    steps:
      - name: fetch argocd repo
        uses: actions/checkout@v3
        with:
          repository: "sangwondevops/argo-helm-chart"
          ref: master
      - name: gh auth login
        run: |
          echo ${{ secrets.PERSONAL_ACCESS_TOKEN }} | gh auth login --with-token
      - name: get github sha
        run: |
          echo ${{ github.sha }}
          git remote -v 

          sed -i "s|tag: .*|tag: ${{ github.sha }}|" appications/example/example-a/helm-chart/values/${{ matrix.environment }}/image.yaml
          git add .
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "Update example-a image tag in ${{ matrix.environment }}."
          git push origin master

      - name: create pr to master
        id: var
        run: |
          if [[ ${{ matrix.environment }} == "staging" ]]; then
            timestamp=`echo $(date +%Y-%m-%d-%H-%M-%S)`
            git pull origin master
            git checkout -b example-a-$timestamp

            sed -i "s|tag: .*|tag: ${{ github.sha }}|" appications/example/example-a/helm-chart/values/production/image.yaml

            git add .
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git commit -m "Update example-a image tag in Production."
            git push origin example-a-$timestamp

            pr_url=$(gh pr create --base master --title "Update example-a Image tag in Production." --body "Update image tag to production" --head example-a-$timestamp)
            echo "APPROVE_PR_URL=$pr_url" >> $GITHUB_OUTPUT
            echo "APPROVE_PR_URL: $pr_url"
          fi
    
  create-pr:
    runs-on: ubuntu-latest
    needs: [ set-environment, patch-image ]
    if: |
      needs.set-environment.outputs.set-env == 'qa'
    steps:
    - uses: actions/checkout@v3
    - name: fetch actions repo
      uses: actions/checkout@v3
      with:
        repository: "sangwondevops/action-module"
        path: ./action-module
        ref: ${{ vars.ref }}
    - name: create-pr
      uses: ./action-module/common/create-pr
      with:
        PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }} 
        TAG: ${{ needs.set-environment.outputs.set-tag }}
        BASE: production

  slack:
    runs-on: ubuntu-latest
    needs: [set-environment, patch-image]
    steps:
    - uses: actions/checkout@v3
    - name: fetch actions repo
      uses: actions/checkout@v3
      with:
        repository: "sangwondevops/action-module"
        path: ./action-module
        ref: ${{ vars.ref }}
    - name: echo env
      run: |
        echo ${{ needs.set-environment.outputs.set-env }}
    - name: Send PR URL
      if: |
        needs.set-environment.outputs.set-env == 'staging'
      id: slack
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "attachments": [
                {
                    "fallback": "Approve for prod deploy",
                    "color": "#3AA3E3",
                    "text": "Approve for prod deploy",
                    "fields": [
                        {
                            "title": "Branch",
                            "value": "${{ github.ref_name }}",
                            "short": true
                        },
                        {
                            "title": "Repository",
                            "value": "${{ github.repository }}",
                            "short": true
                        },
                        {
                            "title": "Actor",
                            "value": "${{ github.actor }}",
                            "short": true
                        }
                    ],
                    "actions": [
                        {
                            "type": "button",
                            "text": "Approve for prod deploy",
                            "url" : "${{ needs.patch-image.outputs.APPROVE_PR_URL }}"
                        }
                    ]
                }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

