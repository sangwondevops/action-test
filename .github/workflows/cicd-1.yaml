name: cicd-1 # Deploy develop only
permissions:
  id-token: write
  contents: write
  pull-requests: write
on:
  push:
    branches: [develop]
  pull_request:
    types: [opened, reopened, synchronize]
    branches: [develop]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout the code
        uses: actions/checkout@v3
      # - uses: actions/setup-node@v3
      #   with:
      #     node-version: 18
      # - name: Cache Node.js modules
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-
      # - name: Install dependencies
      #   run: |
      #     cd my-app
      #     npm ci
      # - name: Test
      #   run: |
      #     cd my-app
      #     npm test

  build-image:
    runs-on: ubuntu-latest
    environment: develop
    needs: [ test ]
    if: |
      (github.event_name == 'push')
    steps:
      - name: checkout the code
        uses: actions/checkout@v3
      # - name: Configure AWS Credentials
      #   id: credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-region: ${{ vars.AWS_REGION }}
      #     role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1
      # - name: docker test
      #   run: |
      #     docker build -f ${GITHUB_WORKSPACE}/Dockerfile . \
      #     --tag ${{ env.registry }}/${{ env.repository }}:latest \
      #     --tag ${{ env.registry }}/${{ env.repository }}:${{ github.sha }}
      #     docker push ${{ env.registry }}/${{ env.repository }}:latest
      #     docker push ${{ env.registry }}/${{ env.repository }}:${{ github.sha }}
      #   env:
      #     repository: ${{ secrets.ECR_REPOSITORY }}
      #     registry: ${{ secrets.ECR_REGISTRY }}

  deploy:
    runs-on: ubuntu-latest
    needs: [ build-image ]
    strategy:
      matrix:
        environment: ["develop"]
    environment: ${{ matrix.environment }}
    steps:
    - uses: actions/checkout@v3
    # - name: Configure AWS Credentials
    #   id: credentials
    #   uses: aws-actions/configure-aws-credentials@v2
    #   with:
    #     aws-region: ${{ vars.AWS_REGION }}
    #     role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
    # - uses: azure/setup-kubectl@v3
    #   with:
    #     version: v1.23.0
    # - uses: azure/setup-helm@v3
    #   with:
    #     version: v3.7.2
    # - name: get k8s  kube-config
    #   run: |
    #     aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER }}
    # - name: deploy kubernetes manifest
    #   run: |
    #     helm upgrade --install test helm-chart/chart --namespace test-${{ matrix.environment }} --wait --atomic \
    #     --timeout 15m \
    #     --values helm-chart/values/${{ matrix.environment }}/values.yaml \
    #     --set image.tag=${{ github.sha }}
  
  slack:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
    - name: nofify-failure
      if: |
        needs.deploy.result == 'failure'
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "attachments": [
                {
                    "fallback": " < Fail to deploy > ",
                    "color": "#3AA3E3",
                    "text": " < Fail to deploy > ",
                    "fields": [
                        {
                            "title": "Fail to deploy",
                            "value": "${{ github.ref_name }}",
                            "short": true
                        },
                     "actions": [
                        {
                            "type": "button",
                            "text": "Details",
                            "url" : 'https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}'
                        }
                      ]
                    ]
                }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
    - name: nofify-success
      if: |
        needs.deploy.result == 'success'
      uses: slackapi/slack-github-action@v1.24.0
      with:
        payload: |
          {
            "attachments": [
                {
                    "fallback": " < Success to deploy > ",
                    "color": "#3AA3E3",
                    "text": " < Success to deploy > ",
                    "fields": [
                        {
                            "title": "Success to deploy",
                            "value": "${{ github.ref_name }}",
                            "short": true
                        },
                     "actions": [
                        {
                            "type": "button",
                            "text": "Details",
                            "url" : 'https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}'
                        }
                      ]
                    ]
                }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
